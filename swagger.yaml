swagger: '2.0'
info:
  title: Sunrise API
  description: API for managing school endpoints in Sunrise
  version: 1.0.0
host: localhost:5000
basePath: /api
schemes:
  - http
paths:
  /users:
    post:
      summary: Create a new user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: User created successfully
        400:
          description: Invalid input
    get:
      summary: Get all users
      responses:
        200:
          description: A list of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        404:
          description: No users found
  /users/{user_id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: user_id
          type: string
          required: true
          description: The ID of the user
      responses:
        200:
          description: A user
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found
    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: user_id
          type: string
          required: true
          description: The ID of the user
        - in: body
          name: body
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: User updated successfully
        404:
          description: User not found
        500:
          description: User update failed
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: user_id
          type: string
          required: true
          description: The ID of the user
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found or delete failed

  # Product paths
  /products:
    post:
      summary: Add a new Product
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Product'
      responses:
        201:
          description: Product added successfully
        400:
          description: Invalid input
    get:
      summary: Get all products
      responses:
        200:
          description: A list of all products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        404:
          description: No product found
  /products/{product_id}:
    get:
      summary: Get a product by ID
      parameters:
        - in: path
          name: product_id
          type: string
          required: true
          description: The ID of the product
      responses:
        200:
          description: A product
          schema:
            $ref: '#/definitions/Product'
        404:
          description: Product not found
    put:
      summary: Update the product by ID
      parameters:
        - in: path
          name: product_id
          type: string
          required: true
          description: The ID of the product
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Product'
      responses:
        200:
          description: Product updated successfully
        404:
          description: Product not found
        500:
          description: Product update failed
    delete:
      summary: Delete the  product by ID
      parameters:
        - in: path
          name: product_id
          type: string
          required: true
          description: The ID of the product
      responses:
        200:
          description: product deleted successfully
        404:
          description: product not found or delete failed

  


  # teacher routes
  /teachers:
    post:
      summary: Create a new teacher
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Teacher'
      responses:
        201:
          description: Teacher created successfully
        400:
          description: Invalid input
    get:
      summary: Get all teachers
      responses:
        200:
          description: A list of teachers
          schema:
            type: array
            items:
              $ref: '#/definitions/Teacher'
        404:
          description: No teachers found

  /teachers/{teacher_id}:
    get:
      summary: Get a teacher by ID
      parameters:
        - in: path
          name: teacher_id
          type: string
          required: true
          description: The ID of the teacher
      responses:
        200:
          description: A teacher
          schema:
            $ref: '#/definitions/Teacher'
        404:
          description: Teacher not found
    put:
      summary: Update a teacher by ID
      parameters:
        - in: path
          name: teacher_id
          type: string
          required: true
          description: The ID of the teacher
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Teacher'
      responses:
        200:
          description: Teacher updated successfully
        404:
          description: Teacher not found
        500:
          description: Teacher update failed
    delete:
      summary: Delete a teacher by ID
      parameters:
        - in: path
          name: teacher_id
          type: string
          required: true
          description: The ID of the teacher
      responses:
        200:
          description: Teacher deleted successfully
        404:
          description: Teacher not found or delete failed

  /menus:
    post:
      summary: Create a new menu
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Menu'
      responses:
        201:
          description: Menu created successfully
        400:
          description: Invalid input
    get:
      summary: Get all menus
      responses:
        200:
          description: A list of menus
          schema:
            type: array
            items:
              $ref: '#/definitions/Menu'
        404:
          description: No menus found

  /menus/{menu_id}:
    get:
      summary: Get a menu by ID
      parameters:
        - in: path
          name: menu_id
          type: string
          required: true
          description: The ID of the menu
      responses:
        200:
          description: A menu
          schema:
            $ref: '#/definitions/Menu'
        404:
          description: Menu not found
    put:
      summary: Update a menu by ID
      parameters:
        - in: path
          name: menu_id
          type: string
          required: true
          description: The ID of the menu
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Menu'
      responses:
        200:
          description: Menu updated successfully
        404:
          description: Menu not found
        500:
          description: Menu update failed
    delete:
      summary: Delete a menu by ID
      parameters:
        - in: path
          name: menu_id
          type: string
          required: true
          description: The ID of the menu
      responses:
        200:
          description: Menu deleted successfully
        404:
          description: Menu not found or delete failed

  /submenus:
    post:
      summary: Create a new submenu
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Submenu'
      responses:
        201:
          description: Submenu created successfully
        400:
          description: Invalid input
    get:
      summary: Get all submenus
      responses:
        200:
          description: A list of submenus
          schema:
            type: array
            items:
              $ref: '#/definitions/Submenu'
        404:
          description: No submenus found

  /submenus/{submenu_id}:
    get:
      summary: Get a submenu by ID
      parameters:
        - in: path
          name: submenu_id
          type: string
          required: true
          description: The ID of the submenu
      responses:
        200:
          description: A submenu
          schema:
            $ref: '#/definitions/Submenu'
        404:
          description: Submenu not found
    put:
      summary: Update a submenu by ID
      parameters:
        - in: path
          name: submenu_id
          type: string
          required: true
          description: The ID of the submenu
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Submenu'
      responses:
        200:
          description: Submenu updated successfully
        404:
          description: Submenu not found
        500:
          description: Submenu update failed
    delete:
      summary: Delete a submenu by ID
      parameters:
        - in: path
          name: submenu_id
          type: string
          required: true
          description: The ID of the submenu
      responses:
        200:
          description: Submenu deleted successfully
        404:
          description: Submenu not found or delete failed
  /login:
    post:
    summary: User login
    description: Authenticates a user and returns a JWT token.
    parameters:
      - in: body
        name: body
        required: true
        description: User login credentials
        schema:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              format: email
              example: "user@example.com"
            password:
              type: string
              format: password
              example: "password123"
    responses:
      200:
        description: JWT token
        schema:
          type: object
          properties:
            access_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      401:
        description: Invalid email or password
      500:
        description: Internal server error
  # Class
  /classes:
    post:
      summary: 'Create a new class'
      description: 'Creates a new class with the provided information.'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Class object that needs to be added'
          required: true
          schema:
            $ref: '#/definitions/Class'

      responses:
        201:
          description: 'Class created successfully'

    get:
      summary: 'Get list of all classes'
      description: 'Returns a list of all classes.'
      produces:
        - 'application/json'
      responses:
        200:
          description: 'List of classes'
          schema:
            type: array
            items:
              $ref: '#/definitions/Class'

  /classes/{class_id}:
    get:
      summary: 'Get class by ID'
      description: 'Returns a class based on the ID provided.'
      produces:
        - 'application/json'
      parameters:
        - name: 'class_id'
          in: 'path'
          required: true
          type: string
      responses:
        200:
          description: 'Class retrieved successfully'
          schema:
            type: object
            $ref: '#/definitions/Class'
        404:
          description: 'Class not found'
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Class not found'

    put:
      summary: 'Update class by ID'
      description: 'Updates a class based on the ID provided.'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - name: 'class_id'
          in: 'path'
          required: true
          type: string
        - in: 'body'
          name: 'body'
          description: 'Class object with updated information'
          required: true
          schema:
            type: object
            $ref: '#/definitions/Class'

      responses:
        200:
          description: 'Class updated successfully'
          schema:
            type: object
            properties:
              className:
                type: string
              classUrl:
                type: string
              aboutClass:
                type: string
              students:
                type: string
        404:
          description: 'Class not found'
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Class not found'

    delete:
      summary: 'Delete class by ID'
      description: 'Deletes a class based on the ID provided.'
      produces:
        - 'application/json'
      parameters:
        - name: 'class_id'
          in: 'path'
          required: true
          type: string
      responses:
        200:
          description: 'Class deleted successfully'
          schema:
            type: object

            properties:
              message:
                type: string
                example: 'Class deleted'
        404:
          description: 'Class not found'
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Class not found'



# Events
  /events:
    post:
      summary: "Create a new event "
      description: "Creates a new event  with the provided information."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Event  object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Event"
      responses:
        201:
          description: "Event  created successfully"
          schema:
            $ref: "#/definitions/Event"

    get:
      summary: "Get list of all event "
      description: "Returns a list of all event ."
      produces:
        - "application/json"
      responses:
        200:
          description: "List of event "
          schema:
            type: array
            items:
              $ref: "#/definitions/Event"

  /events/{eventId}:
    get:
      summary: "Get event  by ID"
      description: "Returns an event  based on the ID provided."
      produces:
        - "application/json"
      parameters:
        - name: "eventId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Event  retrieved successfully"
          schema:
            $ref: "#/definitions/Event"
        404:
          description: "Event  not found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Event  not found"

    put:
      summary: "Update event  by ID"
      description: "Updates an event  based on the ID provided."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "eventId"
          in: "path"
          required: true
          type: string
        - in: "body"
          name: "body"
          description: "Event  object with updated information"
          required: true
          schema:
            $ref: "#/definitions/Event"
      responses:
        200:
          description: "Event  updated successfully"
          schema:
            $ref: "#/definitions/Event"
        404:
          description: "Event  not found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Event  not found"

    delete:
      summary: "Delete event  by ID"
      description: "Deletes an event  based on the ID provided."
      produces:
        - "application/json"
      parameters:
        - name: "eventId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Event  deleted successfully"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Event  deleted"
        404:
          description: "Event  not found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Event detail not found"

# testimonial routes

  /testimonials:
    post:
      summary: "Create a new testimonial "
      description: "Creates a new testimonial  with the provided information."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Testimonial  object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Testimonial"
      responses:
        201:
          description: "Testimonial  created successfully"
          schema:
            $ref: "#/definitions/Testimonial"

    get:
      summary: "Get list of all Testimonial "
      description: "Returns a list of all Testimonial ."
      produces:
        - "application/json"
      responses:
        200:
          description: "List of Testimonial "
          schema:
            type: array
            items:
                $ref: "#/definitions/Testimonial"
  /testimonials/{testimonialId}:
    get:
      summary: "Get Testimonial  by ID"
      description: "Returns an Testimonial  based on the ID provided."
      produces:
        - "application/json"
      parameters:
        - name: "testimonialId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Testimonial  retrieved successfully"
          schema:
            $ref: "#/definitions/Testimonial"
        404:
          description: "Event  not found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Event  not found"
    put:
      summary: "Update Testimonial  by ID"
      description: "Updates an Testimonial  based on the ID provided."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "testimonialId"
          in: "path"
          required: true
          type: string
        - in: "body"
          name: "body"
          description: "Testimonial  object with updated information"
          required: true
          schema:
            $ref: "#/definitions/Testimonial"
      responses:
        200:
          description: "Testimonial  updated successfully"
          schema:
            $ref: "#/definitions/Testimonial"
        404:
          description: "Testimonial  not found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Testimonial  not found"
    delete:
      summary: "Delete Testimonial  by ID"
      description: "Deletes the Testimonial  based on the ID provided."
      produces:
        - "application/json"
      parameters:
        - name: "testimonialId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Testimonial  deleted successfully"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Testimonial  deleted"
        404:
          description: "Testimonial  not found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Testimonial detail not found"




####### Model definitions
definitions:
  User:
    type: object
    properties:
      firstName:
        type: string
        example: John
      lastName:
        type: string
        example: Doe
      mobile:
        type: string
        example: '234567890'
      email:
        type: string
        example: john.doe@example.com
      password:
        type: string
        example: password123
      userType:
        type: string
        example: admin
      IsActive:
        type: integer
        example: 1

  # Teacher
  Teacher:
    type: object
    properties:
      name:
        type: string
        example: Nashid Martines
      email:
        type : string
        example : johnsnow@gmail.com
      age:
        type: integer
        example: 40
      gender:
        type: string
        example: Male
      teacherImage:
        type: string
        example: https://images.unsplash.com/photo-1721403715005-cd5df8ab90ee?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHwzNHx8fGVufDB8fHx8fA%3D%3D
      position:
        type: string
        example: Principal
      isActive:
        type: integer
        example: 1
      about:
        type: string
        example: Expert in Mathematics
      experience:
        type: string
        example: 15 years
      subject:
        type: string
        example: Chemistry Teacher
      duty:
        type: string
        example: The duties of a chemistry teacher include creating lesson plans; preparing and delivering lectures; creating and supervising laboratory activities for students; evaluating student performance; maintaining classroom records; meeting with parents, teachers, and other professionals; and participating in campus events.

  # Menu
  Menu:
    type: object
    properties:
      title:
        type: string
        example: About Us
      menuClass:
        type: string
        example: main-menu
      isActive:
        type: integer
        example: 1
      userId:
        type: string
        example: 6693c7b58b3d3bde81ec497a
      orderBy:
        type: integer
        example: 1

  # Submenu
  Submenu:
    type: object
    required:
      - menuId
      - title
      - subMenuClass
      - isActive
      - userId
    properties:
      menuId:
        type: string
        description: The ID of the menu this submenu belongs to
      title:
        type: string
        description: The title of the submenu
      route:
        type: string
        description: The route of the submenu
      subMenuClass:
        type: string
        description: The CSS class of the submenu
      isActive:
        type: boolean
        description: The status of the submenu
      userId:
        type: string
        description: The ID of the user who created the submenu
      subSubMenu:
        type: array
        description: The sub-submenus under this submenu
        items:
          $ref: '#/definitions/SubSubmenu'

  SubSubmenu:
    type: object
    required:
      - title
      - subSubMenuClass
      - isActive
      - userId
    properties:
      title:
        type: string
        description: The title of the sub-submenu
      route:
        type: string
        description: The route of the sub-submenu
      subSubMenuClass:
        type: string
        description: The CSS class of the sub-submenu
      isActive:
        type: boolean
        description: The status of the sub-submenu
      userId:
        type: integer
        description: The ID of the user who created the sub-submenu

  # Product
  Product:
    type: object
    properties:
      img:
        type: string
        example: https://images.unsplash.com/photo-1721403715005-cd5df8ab90ee?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHwzNHx8fGVufDB8fHx8fA%3D%3D
      title:
        type: string
        example: School Bag
      price:
        type: string
        example: $10
      priceDiscount:
        type: string
        example: $5
      category:
        type: string
        example: Bag
      description:
        type: string
        example: A durable and spacious school bag perfect for students.
      currency:
        type: string
        example: '$10'
      stock:
        type: string
        example: '25'
      availability:
        type: string
        example: 'in stock'
      additionalImages:
        type: array
        items:
          type: string
          example: 'https://images.unsplash.com/photo-1723239406233-88c68024a4d5?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'
      video:
        type: string
        format: 'mp4'
        example: 'assets/videos/product/item1.mp4'
      specifications:
        type: object
        properties:
          dimensions:
            type: string
            example: '40*30*15'
          material:
            type: string
            example: 'Polyester'
          weight:
            type: string
            example: '0.8kg'
      features:
        type: array
        items:
          type: string
      color:
        type: string
        example: 'red,blue,green'
      size:
        type: array
        items:
          type: string
        example: ['S', 'M', 'L']
      rating:
        type: string
        example: '4.5'
      shipping_Cost:
        type: string
        example: '$5'
      deliveryTime:
        type: string
        example: '3-5 business days'
      returnPolicy:
        type: string
        example: '30-day return policy'
      vendorId:
        type: string
        example: '501'
      vendorName:
        type: string
        example: 'Sunrise School Supplies Co.'
      vendorContact:
        type: string
        example: 'support@schoolsupplies.com'
      isActive:
        type: integer
        example: 1



  # Event
  Event:
    type: object
    properties:
      organizerName:
        type: string
        example: 'Sunrise School '
      eventTitle:
        type: string
        example: 'Music Festival'
      eventAddress:
        type: string
        example: 'Central Park'
      eventImage:
        type: string
        example: 'https://images.unsplash.com/photo-1723239406233-88c68024a4d5?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'
      isActive:
        type: integer
        example: 1
      startTime:
        type: string
        example: '18:00'
      endTime:
        type: string
        example: '22:00'
      startDate:
        type: string
        example: '15 Jun'
      endDate:
        type: string
        example: '15 Jun'
      eventYear:
        type: string
        example: '2024'
  
      aboutEvent:
        type: string
        example: 'Experience the best of live music in the heart of the city at Central Park.'
      eventHighLight:
        type: string
        example: 'Live performances by top artists and bands from around the world.'

      eventLabel:
        type: string
        example: 'But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and'


  # Class
  Class:
    type: object
    properties:
      isActive:
        type: integer
        example: 1
      className:
        type: string
        example: 'KG'
      classImage:
        type: string
        example: 'https://plus.unsplash.com/premium_photo-1663088989178-a570bdb3153c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1000&q=80'

      aboutClass:
        type: string
        example: 'Kindergarten or KG focuses on kids of 4 to 6 years or above. The second most class that introduces academics to the kids.'
      classStudent:
        type: string
        example: '50'

      className:
        type: string
        example: 'KG'

      classSubject:
        type: array
        items:
          type : string
        example: ['English','Mathematics','General_Awareness','Extracurricular_Activities']
          
# Testimonial

  Testimonial:
    type: object
    properties:
      userName:
        type: string
        example: 'Arya Stark '
      userId:
        type: string
        example: '153408dlsfljaf304320f '
      category:
        type: 'string'
        example: 'Education'
      title:
        type: string
        example: 'Why is Early Education Essential?'
      about:
        type: string
        example: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry'
      date:
        type : string
        example : 01 December 2024
      img:
        type: string
        example: 'https://images.unsplash.com/photo-1723239406233-88c68024a4d5?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'
      isActive:
        type: integer
        example: 1
      
  



      
